* Build may not complete if you do not have the
  required FreeGLUT or Apple GLUT (on Mac OS X systems).

  NOTE: PDL::Graphics::TriD does require either FreeGLUT
  or Apple GLUT to function.  An OpenGL using plain old
  GLUT will not work with PDL-2.4.6.

* On one Mac OS system, glutBitmapCharacter() appears to 
  to be rendering into the Overlay.  This makes text and
  legends always on top, even if the glRasterPos() was
  set with depth.
  
* ActiveState automated PPM builds currently fail due to
  what appears to be interface detection failures in their
  build environment.  You'll need to use another PPM site
  or build your own OpenGL: (1) install ASPerl on your
  system, (2) do ppm install MinGW to get the compile
  environment, (3) cpan -i OpenGL, and you should be done!

* The build may fail if your FreeGLUT installation uses
  freeglut.h as the name of its include file.  This may
  happen if you have both original GLUT and FreeGLUT on
  the same system.  Edit the Makefile produced and add
  -DHAVE_FREEGLUT_H to the DEFINE = line and things may
  compile then.

* Configuration and compiling requires an active OpenGL
  context (e.g. a display)

* The calling interfaces for OpenGL, GLU, GLUT, GLX, X11,
  and the perl module routines (names beginning with glp)
  are in a state of flux and may not be in sync with the
  current API documentation.

* The Cygwin interface options W32API and WGL do not work
  so you don't get hardware accelerated graphics.  The
  FreeGLUT code does work but uses the Mesa software renderer.

* Too many "extra" variants of standard OpenGL functions.
  Implementation progress with PDL has suggested a way
  to simplify the bindings a la OpenGL::Simple.  TBD.

* examples/planets:  works but has visual artifacts
  examples/tk_steal: runs but maybe not correctly 

*  Examples using GLX calls need to be ported to GLUT

* Some of the functions taking pointer type arguments
  have inconsistent usage for the gl*_p() variants:

    glBufferDataARB_p(target,oga,usage)
    glBufferSubDataARB_p(target,offset,oga)
    glColorPointer_p(size, oga)
    glEdgeFlagPointer_p(oga)
    glIndexPointerEXT_p(oga)
    glIndexPointer_p(oga)
    glNormalPointerEXT_p(oga)
    glNormalPointer_p(oga)
    glTexCoordPointerEXT_p(size, oga)
    glTexCoordPointer_p(size, oga)
    glVertexPointerEXT_p(size, oga)
    glVertexPointer_p(size, oga)
