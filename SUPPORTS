    0.60 This file is still not up to date with the current code.

         POGL builds "out of the box" on more system types
	 than ever, including: Linux, MSWin32, and Mac OS X.

	 Used by PDL-2.4.5 to implement 3D graphics and plots.

	 TBD: generate a more complete/specific list

    ----------------------------------------------------------
    0.59 This file is not up to date with the current code.

         POGL builds "out of the box" on more system types
	 than ever, including: Linux, MSWin32, and Mac OS X.

	 TBD: generate a more complete/specific list

    ----------------------------------------------------------
    0.58 This file is not up to date with the current code.

         TBD: rewrite to reflect actual status

    ----------------------------------------------------------

    0.55 has been tested on Windows, Ubuntu and Fedora, using
    various nVidia boards.
    
    Previous releases havce been tested with Mesa 3.0.
    
    
    It is intended that it supports:
    
    OpenGL 1.0, 1.1, 1.2 (some? most?). (And various extensions).
    
    GLU (unknown version). Several (important to nurbs) functions are not
    supported yet.
    
    GLUT, with full support up to API version 3.
    
    GLX is only supported to the degree that Stan's original module
    supported it. Without an entire X binding it is of limited use, and I
    recommend using glut or Gtk::GLArea instead.
    
    
    Most functions that have no pointer arguments are called identically in
    Perl as in C, and the same name is used. Functions that use array
    arguments and have been changed in "the obvious way" -- to take a
    variable number of arguments and/or to return an array -- have the
    the same names as their C counterparts, but with a _p suffix.
    
    All functions that take pointers are available with their original
    calling syntax and a _c suffix. These are most useful when combined with
    the OpenGL::Array module, which lets you allocate C arrays from Perl.
    
    A third variant, _s, exists for most pointer functions, and takes a string
    argument for each pointer. The underlying OpenGL function will be passed
    a pointer to that string.  If these variants are passed a reference to a
    string, they treat the string contents as the buffer being pointed to.

